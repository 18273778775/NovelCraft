// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projects Project[]

  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapters      Chapter[]
  documents     Document[]
  importRecords ImportRecord[]

  @@index([userId])
  @@map("projects")
}

model Chapter {
  id        String   @id @default(cuid())
  title     String
  content   String
  order     Int
  wordCount Int      @default(0)
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  editHistory EditHistory[]

  @@index([projectId])
  @@index([projectId, order])
  @@map("chapters")
}

// enum DocumentType {
//   OUTLINE
//   CHARACTERS
//   WORLDBUILDING
//   OTHER
// }

model Document {
  id        String       @id @default(cuid())
  title     String
  content   String
  type      String
  projectId String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([projectId, type])
  @@map("documents")
}

model EditHistory {
  id          String   @id @default(cuid())
  contentDiff String
  chapterId   String
  createdAt   DateTime @default(now())

  // Relations
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@index([chapterId])
  @@index([chapterId, createdAt])
  @@map("edit_history")
}

model ImportRecord {
  id              String   @id @default(cuid())
  fileName        String
  chaptersCreated Int
  projectId       String
  createdAt       DateTime @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@map("import_records")
}
